{
	"info": {
		"_postman_id": "9d1926d0-e1f9-4b69-8ed3-3a51aa782d5a",
		"name": "User parameters",
		"description": "**Create a postman collection and perform the following verifications:** [https://qauto.forstudy.space/api-docs/](https://qauto.forstudy.space/api-docs/)\n\n**1\\. Create a user and ensure the user's parameters are applied.**\n\n**2\\. Change the user's email and ensure the user's parameters are applied.**\n\n**3\\. Change the user's password and ensure the user's parameters are applied.**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29521592"
	},
	"item": [
		{
			"name": "Sign Up",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"URL\", \"https://qauto.forstudy.space/api\");",
							"",
							"let UserData = {",
							"    \"name\": \"Doug\",",
							"    \"lastName\": \"Demuro\",",
							"    \"email\": \"dougmuro@mail.com\",",
							"    \"password\": \"Qwerty00\",",
							"};",
							"UserData.repeatPassword = UserData.password;",
							"pm.collectionVariables.set(\"UserData\", UserData);",
							"",
							"pm.collectionVariables.set(\"RegisterData\", JSON.stringify(UserData));",
							"",
							"let NewData = {",
							"    \"email\": \"doug@test.com\",",
							"    \"password\": \"Qwerty77\",",
							"};",
							"pm.collectionVariables.set(\"NewData\", NewData);",
							"",
							"pm.collectionVariables.set(\"Counter\", 0);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"UserData exists\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"UserData\")).to.exist;",
							"});",
							"",
							"let JsonData = pm.response.json().data;",
							"let UserData = pm.collectionVariables.get(\"UserData\");",
							"",
							"pm.test(\"Data matching\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"RegisterData\")).to.exist;",
							"    pm.expect(UserData).to.eql(JSON.parse(pm.collectionVariables.get(\"RegisterData\")));",
							"});",
							"",
							"pm.test(\"UserId exists \" + JsonData.userId, function () {",
							"    pm.expect(JsonData.userId).to.exist;",
							"});",
							"UserData.UserId = JsonData.userId",
							"pm.collectionVariables.set(\"UserData\", UserData);",
							"",
							"pm.test(\"NewData exists\", function () {",
							"    pm.expect(pm.collectionVariables.get(\"NewData\")).to.exist;",
							"});",
							"",
							"postman.setNextRequest(\"Profile\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{RegisterData}}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/auth/signup",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let UserData = pm.collectionVariables.get(\"UserData\");",
							"let JsonData = pm.response.json().data;",
							"",
							"pm.test(\"UserID exists\", function () {",
							"    pm.expect(JsonData.userId).to.exist;",
							"    pm.expect(JsonData.userId).to.eql(UserData.UserId);",
							"});",
							"",
							"postman.setNextRequest(\"Logout\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let UserData = pm.collectionVariables.get(\"UserData\");",
							"let NewData = pm.collectionVariables.get(\"NewData\");",
							"",
							"pm.collectionVariables.set(\"email\", NewData.email);",
							"pm.collectionVariables.set(\"password\", UserData.password);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/email",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"email"
					]
				}
			},
			"response": []
		},
		{
			"name": "Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let UserData = pm.collectionVariables.get(\"UserData\");",
							"let JsonData = pm.response.json().data;",
							"",
							"pm.test(\"UserID exists\", function () {",
							"    pm.expect(JsonData.userId).to.exist;",
							"    pm.expect(JsonData.userId).to.eql(UserData.UserId);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let UserData = pm.collectionVariables.get(\"UserData\");",
							"let NewData = pm.collectionVariables.get(\"NewData\");",
							"",
							"pm.collectionVariables.set(\"oldPassword\", UserData.password);",
							"pm.collectionVariables.set(\"password\", NewData.password);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"oldPassword\": \"{{oldPassword}}\",\n  \"password\": \"{{password}}\",\n  \"repeatPassword\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/users/password",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/auth/logout",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign In",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"let JsonData = pm.response.json().data;",
							"let UserData = pm.collectionVariables.get(\"UserData\")",
							"",
							"pm.test(\"userId\", function () {",
							"    pm.expect(JsonData.userId).to.exist;",
							"    pm.expect(JsonData.userId).to.eql(UserData.UserId);",
							"});",
							"",
							"let counter = pm.collectionVariables.get(\"Counter\");",
							"if (counter === 0) {",
							"    UserData.email = pm.collectionVariables.get(\"email\");",
							"} else if (counter > 0) {",
							"    UserData.password = pm.collectionVariables.get(\"password\");",
							"    UserData.repeatPassword = UserData.password",
							"}",
							"pm.collectionVariables.set(\"UserData\", UserData);",
							"",
							"counter++",
							"pm.collectionVariables.set(\"Counter\", counter);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"remember\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/auth/signin",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Profile",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"      pm.response.to.have.status(200);",
							"});",
							"",
							"let JsonData = pm.response.json().data;",
							"let UserData = pm.collectionVariables.get(\"UserData\")",
							"",
							"pm.test(\"userId \" + JsonData.userId, function () {",
							"    pm.expect(JsonData.userId).to.exist;",
							"    pm.expect(JsonData.userId).to.eql(UserData.UserId);",
							"});",
							"pm.test(\"name\", function () {",
							"    pm.expect(JsonData.name).to.exist;",
							"    pm.expect(JsonData.name).to.eql(UserData.name);",
							"});",
							"pm.test(\"lastName\", function () {",
							"    pm.expect(JsonData.lastName).to.exist;",
							"    pm.expect(JsonData.lastName).to.eql(UserData.lastName);",
							"});",
							"",
							"let counter = pm.collectionVariables.get(\"Counter\");",
							"if (counter === 0) {",
							"    postman.setNextRequest(\"Email\");",
							"} else if (counter === 1) {",
							"    postman.setNextRequest(\"Password\");",
							"}",
							"console.log(UserData);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/users/profile",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/users",
					"host": [
						"{{URL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}